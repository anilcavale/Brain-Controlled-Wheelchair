from bluetooth import *
import time
import RPi.GPIO as GPIO

# creating RFCOMM Bluetooth socket which acts as bluetooth server and binds to a port
server_sock=BluetoothSocket( RFCOMM )
server_sock.bind(("",PORT_ANY))
server_sock.listen(1)

port = server_sock.getsockname()[1]

uuid = "94f39d29-7d6d-437d-973b-fba39e49d4ee"


#advertise the Bluetooth server to nearby devices
advertise_service( server_sock, "SampleServer",
                   service_id = uuid,
                   service_classes = [ uuid, SERIAL_PORT_CLASS ],
                   profiles = [ SERIAL_PORT_PROFILE ]
                  )
                   
print "Waiting for connection on RFCOMM channel %d" % port

#Connect to the Android device after "Connect Rpi button" pressed on Android app
client_sock, client_info = server_sock.accept()
print "Accepted connection from ", client_info

#Motor Pins
Motor1A = 27          #Motor 1 pin 1
Motor1B = 17          #Motor 1 pin 2
Motor1E = 5           #Motor 1 enable pin

Motor2A = 23          #Motor 2 pin 1
Motor2B = 24          #Motor 2 pin 2
Motor2E = 6           #Motor 2 enable pin

GPIO.setmode(GPIO.BCM)              # GPIO Numbering
GPIO.setup(Motor1A,GPIO.OUT)        # All pins as Outputs
GPIO.setup(Motor1B,GPIO.OUT)
GPIO.setup(Motor1E,GPIO.OUT)

GPIO.setup(Motor2A,GPIO.OUT)        # All pins as Outputs
GPIO.setup(Motor2B,GPIO.OUT)
GPIO.setup(Motor2E,GPIO.OUT)

try:
    while True:
        client_info = client_sock.recv(1024)   #receive the data packets from connected android device
        print "received [%s]" % client_info

       if client_info=="Double Blink Detected":
          print "turning right ----------->>>>>>"

          GPIO.output(Motor1A,GPIO.LOW)       #Logic for turning Right
          GPIO.output(Motor1B,GPIO.HIGH)
          GPIO.output(Motor1E,GPIO.HIGH)

          GPIO.output(Motor2A,GPIO.HIGH)
          GPIO.output(Motor2B,GPIO.LOW)
          GPIO.output(Motor2E,GPIO.HIGH)

          sleep(2)

          GPIO.output(Motor1E,GPIO.LOW)      #stop turning after 2 seconds
          GPIO.output(Motor2E,GPIO.LOW)
            
  
        elif(client_info.isdigit()):         #if attentio value is received from Android app

          if(int(client_info)>60):           #the Attention threshold is set to 60 on a scale of 0-100
            print "moving front  ^^^^^^"
            GPIO.output(Motor1A,GPIO.HIGH)   #enable motor 1
            GPIO.output(Motor1B,GPIO.LOW)
            GPIO.output(Motor1E,GPIO.HIGH)

            GPIO.output(Motor2A,GPIO.HIGH)   #enable motor 2
            GPIO.output(Motor2B,GPIO.LOW)
            GPIO.output(Motor2E,GPIO.HIGH)
            
        else:
            print "invalid data received"
      
                
except KeyboardInterrupt:
    pass

except:  
    print "Other error or exception occurred!"  
    
#clean everything  
finally:
    print "disconnected"
    io.cleanup()
    client_sock.close()
    server_sock.close()
    print "all done"


 Android Script

package com.neurosky.algo_sdk_sample;
import android.media.MediaPlayer;
import android.net.Uri;
import android.app.Activity;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothSocket;
import android.content.Intent;
import android.content.pm.ActivityInfo;
import android.content.res.Configuration;
import android.graphics.Color;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.TextView;
import android.widget.Button;
import android.widget.Toast;
import java.io.OutputStream;
import java.util.Set;
import java.io.IOException;
import java.io.InputStream;
import java.util.UUID;
import com.neurosky.AlgoSdk.NskAlgoDataType;
import com.neurosky.AlgoSdk.NskAlgoSdk;
import com.neurosky.AlgoSdk.NskAlgoSignalQuality;
import com.neurosky.AlgoSdk.NskAlgoType;
import com.neurosky.connection.ConnectionStates;
import com.neurosky.connection.TgStreamHandler;
import com.neurosky.connection.TgStreamReader;
import com.neurosky.connection.DataType.MindDataType;
import android.content.Context;
import android.media.AudioManager;
import android.widget.LinearLayout;
import java.util.Random;
/*

 * Project Name:        Brain Controlled Wheelchair
 * Author List: 		Vinit Todai, Akshat Kacheria, Anil Guruprasad
 * Filename: 		    MainActivity.java
 * Functions: 		    onCreate(Bundle), BTinit(), BTconnect(), onBackPressed(),
 *                      onConfigurationChanged(Configuration), onStatesChanged(int),
 *                      onChecksumFail(byte[] , int, int), onRecordFail(int),
 *                      onDataReceived(int, int, Object), showToast(String, int)
 * Global Variables:	global_att
 */

public class MainActivity extends Activity
{

    final String TAG = "MainActivityTag";

    // COMM SDK handles
    private TgStreamReader tgStreamReader;
    private BluetoothAdapter mBluetoothAdapter;

    // canned data variables
    private short raw_data[] = {0};
    private int raw_data_index= 0;

    private Button neurosky_connect_btn;
    private TextView attValue;
    private TextView forced_blink_strength_text;
    private TextView sqText;
    private TextView test_textview;
    private NskAlgoSdk nskAlgoSdk;
    long previous_click_time;

    //Additional Bluetooth Connect Variables for Raspberry-pi
    private final String DEVICE_ADDRESS = "B8:27:EB:93:92:2D"; //MAC Address of Bluetooth Module of Raspberry pi
    private final UUID PORT_UUID = UUID.fromString("00001101-0000-1000-8000-00805f9b34fb");

    private BluetoothDevice device;
    private BluetoothSocket socket;

    private OutputStream outputStream;
    private InputStream inputStream;
    boolean connected = false;
    boolean isRunning = false;
    String command;
    Button bt_connect_btn;
    Button soundbutton;

    public int OldMax =100;
    public int OldMin =0;
    public int NewMax =15;
    public int NewMin =0;
    public int global_att;
    public int OldRange = (OldMax - OldMin);
    public int NewRange = (NewMax - NewMin);

    private Context mContext;
    private Activity mActivity;

    private LinearLayout mRootLayout;
    private LinearLayout BCKG_COLOR;

    private Button mBtnSetMediaVolume;
    private TextView mTVStats;

    private AudioManager mAudioManager;
    private Random mRandom = new Random();
    public int att_global;

    /*
     *
     * Function Name: 	    onCreate
     * Input: 		        None
     * Output: 		        The function called when the app is opened
     * Logic: 		        Sets up the Mobile Screen when the app is opened
     */

    @Override
    protected void onCreate(Bundle savedInstanceState)
    {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        bt_connect_btn = (Button) findViewById(R.id.bt_connect_btn);
        neurosky_connect_btn = (Button) findViewById(R.id.neurosky_connect_btn);
        WebView myWebView = (WebView) findViewById(R.id.webview);
        myWebView.setWebViewClient(new WebViewClient());
        myWebView.getSettings().setJavaScriptEnabled(true);
        myWebView.getSettings().setDomStorageEnabled(true);
        myWebView.getSettings().setUseWideViewPort(true);
        myWebView.setInitialScale(50);
        myWebView.loadUrl("https://192.168.137.53/");


        // Get the application context
        mContext = getApplicationContext();
        mActivity = MainActivity.this;

        // Get the widget reference from xml layout
        mRootLayout = findViewById(R.id.root_layout);
        BCKG_COLOR = findViewById(R.id.color_wala);

        soundbutton = findViewById(R.id.sound);

        final MediaPlayer mp = new MediaPlayer();
        mp.setAudioStreamType(AudioManager.STREAM_ALARM);
        try
        {
            mp.setDataSource(this,Uri.parse("android.resource://"+mContext.getPackageName()+"/"+R.raw.water));
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }

        try
        {
            mp.prepare();
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }
        mp.start();

        soundbutton.setOnClickListener(new View.OnClickListener(){

            public void onClick(View v) {
                mp.start();
            }
        });

        mBtnSetMediaVolume = findViewById(R.id.btn_media);
        mTVStats = findViewById(R.id.tv_stats);

        mAudioManager = (AudioManager) getSystemService(AUDIO_SERVICE);

        // Set click listener for media button
        mBtnSetMediaVolume.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                int media_current_volume = mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC);

                int media_max_volume = mAudioManager.getStreamMaxVolume(AudioManager.STREAM_MUSIC);

                int random_volume = att_global;
                int NewValue = (((random_volume - OldMin) * NewRange) / OldRange) + NewMin;
                random_volume = NewValue;


                // Set media volume level
                mAudioManager.setStreamVolume(
                        AudioManager.STREAM_MUSIC, // Stream type
                        random_volume, // Index
                        AudioManager.FLAG_SHOW_UI // Flags
                );
            }
        });


        nskAlgoSdk = new NskAlgoSdk();

        try
        {
            // (1) Make sure that the device supports Bluetooth and Bluetooth is on
            mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
            if (mBluetoothAdapter == null || !mBluetoothAdapter.isEnabled()) {
                Toast.makeText(
                        this,
                        "Please enable your Bluetooth and re-run this program !",
                        Toast.LENGTH_LONG).show();
            }
        }

        catch (Exception e)
        {
            e.printStackTrace();
            Log.i(TAG, "error:" + e.getMessage());
            return;
        }

        attValue = (TextView)this.findViewById(R.id.attText);
        forced_blink_strength_text = (TextView) this.findViewById(R.id.forced_blink_strength_text);
        test_textview = (TextView) this.findViewById(R.id.test_textview);
        sqText = (TextView)this.findViewById(R.id.sqText);
        sqText.setText("AGAIN");

        int algoTypes = 0;

        algoTypes += NskAlgoType.NSK_ALGO_TYPE_MED.value;

        algoTypes += NskAlgoType.NSK_ALGO_TYPE_ATT.value;

        algoTypes += NskAlgoType.NSK_ALGO_TYPE_BLINK.value;

        algoTypes += NskAlgoType.NSK_ALGO_TYPE_BP.value;


        nskAlgoSdk.NskAlgoStart(false);


        // Raspberry pi Bluetooth connect button logic


        //onClick Listener for "Connect Rpi" Button, if BTinit returns true,
        // i.e, bluetooth is available on device and turned on, then Raspberry pi will be connected.
        // A Bluetooth server is deployed on Raspberry pi
        bt_connect_btn.setOnClickListener(new View.OnClickListener(){
            @Override
            public void onClick(View v)
            {

                if(BTinit())
                {
                    BTconnect();
                }

            }


        });



        //onClick Listener for "Connect Neurosky" Button,
        neurosky_connect_btn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                raw_data = new short[512];
                raw_data_index = 0;


                tgStreamReader = new TgStreamReader(mBluetoothAdapter,callback);

                if(tgStreamReader != null && tgStreamReader.isBTConnected())
                {

                    // Prepare for connecting Android app with EEG headset
                    tgStreamReader.stop();
                    tgStreamReader.close();
                }

                tgStreamReader.connect();
            }
        });



        //onClick Listener for Signal Quality of brainwaves from headset, if Signal is POOR or MEDIUM,
        // then UI will display it and corresponding data will be sent to raspberry pi

        nskAlgoSdk.setOnSignalQualityListener(new NskAlgoSdk.OnSignalQualityListener() {
            @Override
            public void onSignalQuality(final int level) {
                runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        String sqStr = NskAlgoSignalQuality.values()[level].toString();
                        sqText.setText(sqStr);

                        if(sqText.getText().toString().equals("NOT DETECTED") || sqText.getText().toString().equals("POOR") || sqText.getText().toString().equals("MEDIUM"))
                        {
                            command = "NOT_GOOD_SIGNAL";


                            // Write on outputstream, i.e. send data to Raspberry pi via bluetooth
                            try
                            {
                                outputStream.write(command.getBytes());
                            }
                            catch(IOException e)
                            {
                                e.printStackTrace();
                            }
                        }

                        else
                        {
                            int cond=1;
                        }

                    }
                });
            }
        });


//onClick Listener for Attention values from headset
        nskAlgoSdk.setOnAttAlgoIndexListener(new NskAlgoSdk.OnAttAlgoIndexListener()
        {
            @Override
            public void onAttAlgoIndex(int value)
            {
                global_att = value;
                String send_med_value = String.valueOf(value);

                //send the attention value directly to Raspberry pi
                try
                {
                    outputStream.write(send_med_value.getBytes());
                }
                catch(IOException e)
                {
                    e.printStackTrace();
                }

                Log.d(TAG, "NskAlgoAttAlgoIndexListener: Attention:" + value);
                String attStr = "[" + value + "]";
                final String finalAttStr = attStr;
                att_global=value;

                runOnUiThread(new Runnable()
                {
                    @Override
                    public void run()
                    {
                        // change UI elements here
                        attValue.setText(finalAttStr);
                        mBtnSetMediaVolume.performClick();

                        //The background color of Andrroid app consists of 7 colors which resemble the rainbow colors, VIBGYOR
                        //If Attention is less, then background is RED and when it is more, the background turns violet and it
                        // changes gradually in between depending on the Attention level

                        //RED
                        if(global_att > 0 && global_att < 15)
                        {
                            BCKG_COLOR.setBackgroundColor(Color.parseColor("#FF0000"));
                        }
                        //ORANGE
                        else if (global_att > 16 && global_att < 30)
                        {
                            BCKG_COLOR.setBackgroundColor(Color.parseColor("#FF7F00"));
                        }
                        //YELLOW
                        else if (global_att > 31 && global_att < 45)
                        {
                            BCKG_COLOR.setBackgroundColor(Color.parseColor("#FFFF00"));
                        }
                        //GREEN
                        else if (global_att > 46 && global_att < 60)
                        {
                            BCKG_COLOR.setBackgroundColor(Color.parseColor("#00FF00"));
                        }
                        //BLUE
                        else if (global_att > 61 && global_att < 75)
                        {
                            BCKG_COLOR.setBackgroundColor(Color.parseColor("#0000FF"));
                        }
                        //INDIGO
                        else if (global_att > 76 && global_att < 90)
                        {
                            BCKG_COLOR.setBackgroundColor(Color.parseColor("#4B0082"));
                        }
                        //VIOLET
                        else
                        {
                            BCKG_COLOR.setBackgroundColor(Color.parseColor("#9400D3"));
                        }

                    }
                });
            }
        });
//onClick Listener for Eye Blinks
        nskAlgoSdk.setOnEyeBlinkDetectionListener(new NskAlgoSdk.OnEyeBlinkDetectionListener() {
            @Override
            public void onEyeBlinkDetect(int strength) {
                Log.d(TAG, "NskAlgoEyeBlinkDetectionListener: Eye blink detected: " + strength);
                final int final_strength = strength;

                runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        String text1 = "BLINK_DETECTED";
                        soundbutton.performClick();

                            forced_blink_strength_text.setText(String.valueOf(final_strength));

                            // change UI elements here

                            try
                            {
                                outputStream.write(text1.getBytes());
                            }
                            catch (IOException e)
                            {
                                e.printStackTrace();
                            }

                            long temp = System.currentTimeMillis();

                            // logic to check for two eye blinks continuously in a span of 1 second threshold
                            if (previous_click_time != 0)
                            {
                                if (temp - previous_click_time < 1000)
                                {
                                    test_textview.setText("DOUBLE_BLINK");
                                    soundbutton.performClick();
                                    command="DOUBLE_BLINK";

                                    //send the string DOUBLE BLINK to raspberry pi via bluetooth
                                    try
                                    {
                                        outputStream.write(command.getBytes());
                                    }

                                    catch (IOException e)
                                    {
                                        e.printStackTrace();
                                    }
                                }

                                else
                                {
                                    test_textview.setText("NO DOUBLE BLINK");
                                }
                            }

                            previous_click_time = temp;

                    }
                });

            }
        });


    } // END OF ONCREATE



    /*
     *
     * Function Name: 	    BTinit
     * Input: 		        None
     * Output: 		        Initializes the Bluetooth in Android device
     * Logic: 		        This function Checks if the device supports bluetooth and if yes, the is it enabled.
     *                      If not, the program will ask permission from the user to enable it
     * Example Call:		BTinit()
     */
    public boolean BTinit()
    {
        boolean found = false;

        BluetoothAdapter bluetoothAdapter = BluetoothAdapter.getDefaultAdapter();

        if(bluetoothAdapter == null) //Checks if the device supports bluetooth
        {
            Toast.makeText(getApplicationContext(), "Device doesn't support bluetooth", Toast.LENGTH_SHORT).show();
        }

        if(!bluetoothAdapter.isEnabled()) //Checks if bluetooth is enabled. If not, the program will ask permission from the user to enable it
        {
            Intent enableAdapter = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
            startActivityForResult(enableAdapter,0);

            try
            {
                Thread.sleep(1000);
            }
            catch(InterruptedException e)
            {
                e.printStackTrace();
            }
        }

        Set<BluetoothDevice> bondedDevices = bluetoothAdapter.getBondedDevices();

        if(bondedDevices.isEmpty()) //Checks for paired bluetooth devices
        {
            Toast.makeText(getApplicationContext(), "Please pair the device first", Toast.LENGTH_SHORT).show();
        }
        else
        {
            for(BluetoothDevice iterator : bondedDevices)
            {
                if(iterator.getAddress().equals(DEVICE_ADDRESS))
                {
                    device = iterator;
                    found = true;
                    break;
                }
            }
        }

        return found;
    }



    /*
     *
     * Function Name: 	    BTconnect
     * Input: 		        None
     * Output: 		        Creates a socket to handle the outgoing bluetooth connection to Raspberry pi
     * Logic: 		        This function creates an RFCOMM Socket and mobile device acts as a client and
     *                      the Raspberry pi acts as Bluetooth Server
     * Example Call:		BTconnect()
     */

    public boolean BTconnect()
    {
        try
        {
            socket = device.createRfcommSocketToServiceRecord(PORT_UUID); //Creates a socket to handle the outgoing connection
            socket.connect();

            Toast.makeText(getApplicationContext(),
                    "Connection to Raspberry Pi successful", Toast.LENGTH_LONG).show();
            connected = true;
            neurosky_connect_btn.setEnabled(true);
        }
        catch(IOException e)
        {
            e.printStackTrace();
            connected = false;
        }

        if(connected)
        {
            try
            {
                outputStream = socket.getOutputStream(); //gets the output stream of the socket
            }
            catch(IOException e)
            {
                e.printStackTrace();
            }

            try
            {
                inputStream = socket.getInputStream(); //gets the input stream of the socket
            }
            catch (IOException e)
            {
                e.printStackTrace();
            }
        }

        return connected;
    }





    /*
     *
     * Function Name: 	    onBackPressed
     * Input: 		        None
     * Output: 		        Closes the connection and quits app
     * Logic: 		        Closes the app on Back pressed
     */

    @Override
    public void onBackPressed()
    {
        nskAlgoSdk.NskAlgoUninit();
        finish();
    }



    private TgStreamHandler callback = new TgStreamHandler()
    {


        /*
         *
         * Function Name: 	    onStatesChanged
         * Input: 		        connectionStates
         * Output: 		        Displays the different states the Headset signal is at present.
         *                      States can be : STATE_CONNECTING, STATE_CONNECTED, STATE_GET_DATA_TIME_OUT etc as mentioned
         */

        @Override
        public void onStatesChanged(int connectionStates)
        {
            // TODO Auto-generated method stub
            Log.d(TAG, "connectionStates change to: " + connectionStates);

            switch (connectionStates)
            {
                case ConnectionStates.STATE_CONNECTING:
                    // Do something when connecting
                    break;
                case ConnectionStates.STATE_CONNECTED:
                    // Do something when connected
                    tgStreamReader.start();
                    showToast("Connection to Neurosky Mindwave Mobile successful", Toast.LENGTH_SHORT);
                    break;
                case ConnectionStates.STATE_WORKING:
                    break;
                case ConnectionStates.STATE_GET_DATA_TIME_OUT:
                    showToast("Get data time out!", Toast.LENGTH_SHORT);
                    break;
                case ConnectionStates.STATE_STOPPED:
                    break;
                case ConnectionStates.STATE_DISCONNECTED:
                    break;
                case ConnectionStates.STATE_ERROR:
                    break;
                case ConnectionStates.STATE_FAILED:
                    break;
            }
        }


        /*
         *
         * Function Name: 	    onChecksumFail
         * Input: 		        bytes, i, i1
         * Output: 		        Handles the output when the checksum received from the Headset and the original checksum does not match
         */
        @Override
        public void onChecksumFail(byte[] bytes, int i, int i1)
        {
            // We can add the code to handle the output if checksum fails. We can make a toast and display and quit the app

        }


        /*
         *
         * Function Name: 	    onRecordFail
         * Input: 		        flag
         * Output: 		        Makes a log in Android Logcat and display the error
         */
        @Override
        public void onRecordFail(int flag)
        {
            // You can handle the record error message here
            Log.e(TAG,"onRecordFail: " +flag);

        }


        /*
         *
         * Function Name: 	    onDataReceived
         * Input: 		        datatype, data, obj
         * Output: 		        The important function that receives the data from EEG Headset and classifies
         *                      it into different datatypes based on the Headset Documentation
         *                      eg : CODE_ATTENTION, CODE_MEDITATION, CODE_POOR_SIGNAL, CODE_RAW
         * Logic: 		        It receives the data packets from headset and classifies into datatypes as described above
         */

        @Override
        public void onDataReceived(int datatype, int data, Object obj)
        {
            // You can handle the received data here
            // You can feed the raw data to algo sdk here if necessary.
            Log.i(TAG,"onDataReceived");
            switch (datatype) {
                case MindDataType.CODE_ATTENTION:

                    short attValue[] = {(short)data};

                    nskAlgoSdk.NskAlgoDataStream(NskAlgoDataType.NSK_ALGO_DATA_TYPE_ATT.value, attValue, 1);
                    break;
                case MindDataType.CODE_MEDITATION:
                    short medValue[] = {(short)data};
                    nskAlgoSdk.NskAlgoDataStream(NskAlgoDataType.NSK_ALGO_DATA_TYPE_MED.value, medValue, 1);
                    break;
                case MindDataType.CODE_POOR_SIGNAL:
                    short pqValue[] = {(short)data};
                    nskAlgoSdk.NskAlgoDataStream(NskAlgoDataType.NSK_ALGO_DATA_TYPE_PQ.value, pqValue, 1);
                    break;
                case MindDataType.CODE_RAW:
                    raw_data[raw_data_index++] = (short)data;
                    if (raw_data_index == 512) {
                        nskAlgoSdk.NskAlgoDataStream(NskAlgoDataType.NSK_ALGO_DATA_TYPE_EEG.value, raw_data, raw_data_index);
                        raw_data_index = 0;
                    }
                    break;
                default:
                    break;
            }
        }


        /*
         *
         * Function Name: 	    showToast
         * Input: 		        msg --> The message to show in toast
         *                      timeStyle --> The time to show the message
         * Output: 		        Displays a toast in android
         * Example Call:		showToast("Connection to Neurosky Mindwave Mobile successful", Toast.LENGTH_SHORT);
         */

        public void showToast(final String msg, final int timeStyle) {
            MainActivity.this.runOnUiThread(new Runnable() {
                public void run() {
                    Toast.makeText(getApplicationContext(), msg, timeStyle).show();
                }

            });
        }
    };}
